plugins {
    alias(libs.plugins.androidApplication)
    id "org.sonarqube" version "4.4.1.3373"
}

android {
    namespace 'at.gammastrahlung.monopoly_app'
    compileSdk 34

    jacoco {
        version = "0.8.12"
    }

    defaultConfig {
        applicationId "at.gammastrahlung.monopoly_app"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            enableUnitTestCoverage true
        }
    }

    buildFeatures {
        dataBinding true
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()
            finalizedBy jacocoTestReport
        }
    }

    flavorDimensions = ['websocket_uri']
    productFlavors {
        localhost {
            dimension 'websocket_uri'
            // WebSocket connection URI
            resValue "string", "websocket_uri", "ws://10.0.2.2:53211/monopoly"
        }
        'se2-demo' {
            dimension 'websocket_uri'
            // WebSocket connection URI
            resValue "string", "websocket_uri", "ws://se2-demo.aau.at:53211/monopoly"
        }
    }
}

tasks.register('jacocoTestReport', JacocoReport) {
    dependsOn "testLocalhostDebugUnitTest"
    description = "Generate Jacoco coverage reports"

    reports {
        xml.required = true
        html.required = true
    }

    def fileFilter = ['**/AndroidManifest.xml', '**/strings.xml', '**/*.xml', '**/*.json', '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${project.layout.buildDirectory.get().asFile}/intermediates/javac/localhostDebug/compileLocalhostDebugJavaWithJavac/classes", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(files("${project.layout.buildDirectory.get().asFile}/outputs/unit_test_code_coverage/localhostDebugUnitTest/testLocalhostDebugUnitTest.exec"))
}

sonar {
    properties {
        property "sonar.projectKey", "gammaStrahlung_monopoly_app"
        property "sonar.organization", "gammastrahlung"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.projectDir}/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
    }
}

dependencies {

    implementation libs.appcompat
    implementation libs.material
    implementation libs.activity
    implementation libs.constraintlayout
    implementation libs.okhttp
    testImplementation libs.junit
    androidTestImplementation libs.ext.junit
    androidTestImplementation libs.espresso.core
    testImplementation libs.junit.jupiter
    testRuntimeOnly libs.junit.jupiter.engine
    testImplementation libs.mockito.core

    compileOnly libs.lombok
    annotationProcessor libs.lombok

    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok

    implementation libs.gson
}